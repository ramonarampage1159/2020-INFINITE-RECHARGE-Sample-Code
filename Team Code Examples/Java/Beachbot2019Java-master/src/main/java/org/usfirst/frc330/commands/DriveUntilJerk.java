// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.command.BBCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.constants.GrabberConst;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

/**
 *
 */
public class DriveUntilJerk extends BBCommand {

    double throttle;
    double previousAccel;
    double currentAccel;
    double jerk;
    double jerkThreshold;
    double ramp;

    public DriveUntilJerk(double throttle, double timeout, double jerkThreshold) {

        requires(Robot.chassis);
        this.throttle = throttle;
        this.setTimeout(timeout);
        this.jerkThreshold = jerkThreshold;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	Robot.chassis.gyroPID.disable();
    	Robot.chassis.leftDrivePID.disable();
        Robot.chassis.rightDrivePID.disable();

        previousAccel = Robot.chassis.getAccelY();
        ramp = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        currentAccel = Robot.chassis.getAccelY();
        jerk = currentAccel - previousAccel;
        previousAccel = currentAccel;

        if (ramp < 1.0)
        {
            ramp += 0.1;
        }

        Robot.chassis.tankDrive(throttle*ramp, throttle*ramp);
        
        Logger.getInstance().println("Current jerk: " + jerk, Severity.INFO);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if(this.isTimedOut() || ((Math.abs(jerk) > jerkThreshold) && ramp > 0.8)){
            //abs of current - accel > threshold
            return true;
        }
        else{
                return false;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        this.end();
    }
}
