// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.HandConst;
import org.usfirst.frc330.constants.LiftConst;
import org.usfirst.frc330.subsystems.Pickup.GamePiece;

/**
 *
 */
public class HandOut extends BBCommand {

    int positionIndex;

    double [][] positions =
        {
            {LiftConst.DeployBallLow,   HandConst.ballPlacementLow},
            {LiftConst.DeployBallMid,   HandConst.ballPlacementMid},
            {LiftConst.DeployBallHi,   HandConst.ballPlacementHigh},
            {LiftConst.DeployHatchLow,   HandConst.hatchPlacementLow},
            {LiftConst.DeployHatchMid,   HandConst.hatchPlacementMid},
            {LiftConst.DeployHatchHi,   HandConst.hatchPlacementHigh},
            {LiftConst.DeployBallCargo, HandConst.ballPlacementCargo}
        };

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HandOut() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.hand);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        double liftSetpoint = Robot.lift.getSetpoint();
        double distance = Math.abs(positions[0][0] - liftSetpoint);
        int positionIndex = 0;
        for(int i = 1; i < positions.length; i++){
            double i_distance = Math.abs(positions[i][0] - liftSetpoint);
            if(i_distance < distance){
                positionIndex = i;
                distance = i_distance;
            }
        }

        Robot.hand.setAngle(positions[positionIndex][1]);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.hand.setAngle(HandConst.defense);
        if(Robot.pickup.getLastPickup() == GamePiece.BALL){
            Scheduler.getInstance().add(new RollerOnSlowBall());
        }
        else{
            Scheduler.getInstance().add(new RollerOnSlowHatch());
        }
        
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        this.end();
    }
}
