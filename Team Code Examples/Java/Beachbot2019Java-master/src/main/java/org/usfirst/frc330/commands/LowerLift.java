// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;

import java.util.Arrays;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.LiftConst;

/**
 *
 */
public class LowerLift extends BBCommand {

    double currentSetpoint;
    double[] positions = new double[]{
        LiftConst.defense,
        LiftConst.DeployBallLow,
        LiftConst.DeployBallMid,
        LiftConst.DeployBallHi,
        LiftConst.DeployHatchLow,
        LiftConst.DeployHatchMid,
        LiftConst.DeployHatchHi
    };

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LowerLift() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        Arrays.sort(positions);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        currentSetpoint = Robot.lift.getSetpoint();
        for(int i=positions.length-1; i>=0; i--){
            if(positions[i] < currentSetpoint && Math.abs(currentSetpoint - positions[i]) > 0.01 ){
                Robot.lift.setLiftPosition(positions[i]);
                break;
            }
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
