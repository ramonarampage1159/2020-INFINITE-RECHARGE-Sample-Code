// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.HandConst;
import org.usfirst.frc330.constants.LiftConst;
import org.usfirst.frc330.subsystems.Pickup.GamePiece;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

/**
 *
 */
public class RaiseLiftSensor extends BBCommand {

    double currentSetpoint;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public RaiseLiftSensor() {

        //Arrays are sorted in LowerLiftSensor
        requires(Robot.lift);
        //requires(Robot.hand);

    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.hand.setAngle(HandConst.defense);
        currentSetpoint = Robot.lift.getSetpoint();
        double[] sortedArray;
        if(Robot.pickup.getLastPickup() == GamePiece.BALL){
            sortedArray = LiftConst.ballPositions;
        }
        //else if(Robot.pickup.getHasHatch()){
        else {
            sortedArray = LiftConst.hatchPositions;
        }
        // else{
        //     sortedArray = LiftConst.allPositions;
        //     Logger.getInstance().println("Set Lift Postion Using Sensor: Unknown Object!", true, Severity.WARNING);
        // }

        for(int i=0; i<sortedArray.length; i++){
            if(sortedArray[i] > currentSetpoint && Math.abs(currentSetpoint - sortedArray[i]) > 0.01 ){
                Robot.lift.setLiftPosition(sortedArray[i]);
                break;
            }
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
