// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.*;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

/**
 *
 */
public class SensorCloseClawHatch extends BBCommand {

    int consecutiveGetHatchInRanges;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public SensorCloseClawHatch() {
        requires(Robot.pickup);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        consecutiveGetHatchInRanges = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if (Robot.pickup.getHatchInRange()){
    		this.consecutiveGetHatchInRanges ++;
    	}
    	else {
    		this.consecutiveGetHatchInRanges = 0;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return consecutiveGetHatchInRanges > GrabberConst.getHatchInRangeMinRepititions;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.pickup.closeClaw();
        Logger.getInstance().println("Hatch in range: " + Robot.pickup.getHatchInRange(), Severity.INFO);
    	Logger.getInstance().println("Sensor: " + Robot.pickup.getSensorDistance(), Severity.INFO);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
